"""
Malware quarantine configuration check.

This module implements checks to verify that malware quarantine is properly
configured and functioning for antivirus software.
"""

import logging
import subprocess
import json
import platform
import os
import re
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta
from pathlib import Path

from ..base import BaseCheck, CheckResult, CheckStatus

logger = logging.getLogger(__name__)


class QuarantineCheck(BaseCheck):
    """Check for malware quarantine configuration and functionality."""

    def __init__(self):
        super().__init__()
        self.id = "malware_quarantine"
        self.name = "Malware Quarantine"
        self.description = "Verify malware quarantine is configured and functioning properly"
        self.category = "malware"
        self.severity = "medium"
        self.supported_os = ["windows", "linux", "macos"]

    def execute(self, context: Dict[str, Any]) -> CheckResult:
        """
        Execute the malware quarantine check.

        Args:
            context: Execution context containing OS info and other details

        Returns:
            CheckResult with the quarantine status
        """
        try:
            os_type = context.get('os_type', platform.system().lower())

            if os_type == 'windows':
                return self._check_windows_quarantine()
            elif os_type == 'linux':
                return self._check_linux_quarantine()
            elif os_type == 'darwin':  # macOS
                return self._check_macos_quarantine()
            else:
                return self._create_error_result(f"Unsupported OS: {os_type}")

        except Exception as e:
            logger.error(f"Error in quarantine check: {str(e)}")
            return self._create_error_result(str(e))

    def _check_windows_quarantine(self) -> CheckResult:
        """Check Windows quarantine configuration."""
        results = {
            'defender_quarantine': {},
            'third_party_quarantine': [],
            'quarantine_policies': {},
            'quarantined_items': []
        }

        try:
            # Check Windows Defender quarantine settings
            defender_quarantine = self._check_windows_defender_quarantine()
            results['defender_quarantine'] = defender_quarantine

            # Check third-party antivirus quarantine
            third_party_quarantine = self._check_third_party_quarantine_windows()
            results['third_party_quarantine'] = third_party_quarantine

            # Check quarantine policies
            quarantine_policies = self._check_windows_quarantine_policies()
            results['quarantine_policies'] = quarantine_policies

            # Check for quarantined items
            quarantined_items = self._check_windows_quarantined_items()
            results['quarantined_items'] = quarantined_items

            # Determine overall status
            status, message = self._assess_windows_quarantine_status(results)

        except Exception as e:
            logger.error(f"Error checking Windows quarantine: {str(e)}")
            status = "error"
            message = f"Error checking Windows quarantine: {str(e)}"

        return CheckResult(
            status=CheckStatus(status),
            message=message,
            details=results,
            recommendations=self._get_windows_quarantine_recommendations(results)
        )

    def _check_windows_defender_quarantine(self) -> Dict[str, Any]:
        """Check Windows Defender quarantine configuration."""
        try:
            # Check quarantine settings using PowerShell
            ps_command = """
            Get-MpPreference | Select-Object -Property 
                QuarantinePurgeItemsAfterDelay,
                SubmitSamplesConsent,
                MAPSReporting,
                DisableAutoExclusions
            | ConvertTo-Json
            """

            result = subprocess.run(
                ["powershell", "-Command", ps_command],
                capture_output=True,
                text=True,
                timeout=30
            )

            quarantine_info = {}

            if result.returncode == 0 and result.stdout.strip():
                prefs_data = json.loads(result.stdout)

                quarantine_info = {
                    'quarantine_purge_delay': prefs_data.get('QuarantinePurgeItemsAfterDelay'),
                    'sample_submission': prefs_data.get('SubmitSamplesConsent'),
                    'maps_reporting': prefs_data.get('MAPSReporting'),
                    'auto_exclusions_disabled': prefs_data.get('DisableAutoExclusions')
                }

                # Check if quarantine is properly configured
                purge_delay = quarantine_info.get('quarantine_purge_delay', 0)
                quarantine_info['quarantine_configured'] = purge_delay > 0
                quarantine_info['reasonable_purge_delay'] = 7 <= purge_delay <= 90

            # Check quarantine folder accessibility
            quarantine_info.update(self._check_defender_quarantine_folder())

            return quarantine_info

        except Exception as e:
            logger.error(f"Error checking Windows Defender quarantine: {str(e)}")
            return {'error': str(e)}

    def _check_defender_quarantine_folder(self) -> Dict[str, Any]:
        """Check Windows Defender quarantine folder."""
        folder_info = {
            'quarantine_folder_accessible': False,
            'quarantine_folder_path': None
        }

        # Common Windows Defender quarantine paths
        possible_paths = [
            r"C:\ProgramData\Microsoft\Windows Defender\Quarantine",
            r"C:\Program Files\Windows Defender\Quarantine",
            r"C:\Windows\System32\winevt\Logs"  # Alternative location
        ]

        for path in possible_paths:
            try:
                if os.path.exists(path):
                    folder_info['quarantine_folder_accessible'] = True
                    folder_info['quarantine_folder_path'] = path

                    # Try to get folder size (indicates quarantine activity)
                    try:
                        total_size = 0
                        file_count = 0
                        for root, dirs, files in os.walk(path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                try:
                                    total_size += os.path.getsize(file_path)
                                    file_count += 1
                                except (OSError, IOError):
                                    continue

                        folder_info['quarantine_folder_size_mb'] = round(total_size / (1024 * 1024), 2)
                        folder_info['quarantine_file_count'] = file_count
                        folder_info['has_quarantined_items'] = file_count > 0
                    except Exception as e:
                        logger.debug(f"Error analyzing quarantine folder: {e}")

                    break
            except Exception as e:
                logger.debug(f"Error checking path {path}: {e}")

        return folder_info

    def _check_third_party_quarantine_windows(self) -> List[Dict[str, Any]]:
        """Check third-party antivirus quarantine settings on Windows."""
        third_party_quarantine = []

        # Check common third-party antivirus registry locations
        av_registry_paths = {
            'Norton': r'HKEY_LOCAL_MACHINE\SOFTWARE\Symantec\SharedDefs\Quarantine',
            'McAfee': r'HKEY_LOCAL_MACHINE\SOFTWARE\McAfee\VSCore\Quarantine',
            'Kaspersky': r'HKEY_LOCAL_MACHINE\SOFTWARE\KasperskyLab\Components\Quarantine',
            'Bitdefender': r'HKEY_LOCAL_MACHINE\SOFTWARE\Bitdefender\Antivirus\Quarantine',
            'Avast': r'HKEY_LOCAL_MACHINE\SOFTWARE\AVAST Software\Avast\Quarantine'
        }

        for av_name, registry_path in av_registry_paths.items():
            try:
                # Try to read registry key
                reg_command = f'reg query "{registry_path}" /s'
                result = subprocess.run(
                    reg_command,
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=10
                )

                if result.returncode == 0:
                    quarantine_info = {
                        'antivirus': av_name,
                        'registry_path': registry_path,
                        'quarantine_configured': True,
                        'registry_accessible': True
                    }

                    # Parse registry output for quarantine settings
                    output_lines = result.stdout.split('\n')
                    for line in output_lines:
                        if 'REG_' in line:
                            quarantine_info['has_settings'] = True
                            break

                    third_party_quarantine.append(quarantine_info)

            except Exception as e:
                logger.debug(f"Error checking {av_name} quarantine: {e}")

        return third_party_quarantine

    def _check_windows_quarantine_policies(self) -> Dict[str, Any]:
        """Check Windows quarantine policies via Group Policy."""
        policies = {
            'group_policy_configured': False,
            'quarantine_policies': []
        }

        try:
            # Check Group Policy settings for quarantine
            gp_command = """
            Get-ItemProperty -Path "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Quarantine" -ErrorAction SilentlyContinue |
            ConvertTo-Json
            """

            result = subprocess.run(
                ["powershell", "-Command", gp_command],
                capture_output=True,
                text=True,
                timeout=15
            )

            if result.returncode == 0 and result.stdout.strip() and result.stdout.strip() != "null":
                policy_data = json.loads(result.stdout)
                policies['group_policy_configured'] = True
                policies['quarantine_policies'] = policy_data

        except Exception as e:
            logger.debug(f"Error checking quarantine policies: {e}")

        return policies

    def _check_windows_quarantined_items(self) -> List[Dict[str, Any]]:
        """Check for quarantined items in Windows Defender."""
        quarantined_items = []

        try:
            # Use PowerShell to get quarantine history
            ps_command = """
            Get-MpThreatDetection | Where-Object {$_.ActionSuccess -eq $true -and $_.Resources -like "*quarantine*"} |
            Select-Object -First 10 ThreatName, Resources, InitialDetectionTime, ActionSuccess |
            ConvertTo-Json
            """

            result = subprocess.run(
                ["powershell", "-Command", ps_command],
                capture_output=True,
                text=True,
                timeout=30
            )

            if result.returncode == 0 and result.stdout.strip() and result.stdout.strip() != "null":
                detections = json.loads(result.stdout)

                if isinstance(detections, dict):
                    detections = [detections]

                for detection in detections:
                    quarantined_items.append({
                        'threat_name': detection.get('ThreatName'),
                        'resources': detection.get('Resources'),
                        'detection_time': detection.get('InitialDetectionTime'),
                        'action_successful': detection.get('ActionSuccess')
                    })

        except Exception as e:
            logger.debug(f"Error checking quarantined items: {e}")

        return quarantined_items

    def _check_linux_quarantine(self) -> CheckResult:
        """Check Linux quarantine configuration."""
        results = {
            'clamav_quarantine': {},
            'other_av_quarantine': [],
            'quarantine_directories': [],
            'quarantine_policies': {}
        }

        try:
            # Check ClamAV quarantine configuration
            clamav_quarantine = self._check_clamav_quarantine()
            results['clamav_quarantine'] = clamav_quarantine

            # Check other antivirus quarantine
            other_av_quarantine = self._check_other_linux_av_quarantine()
            results['other_av_quarantine'] = other_av_quarantine

            # Check quarantine directories
            quarantine_dirs = self._check_linux_quarantine_directories()
            results['quarantine_directories'] = quarantine_dirs

            # Determine overall status
            status, message = self._assess_linux_quarantine_status(results)

        except Exception as e:
            logger.error(f"Error checking Linux quarantine: {str(e)}")
            status = "error"
            message = f"Error checking Linux quarantine: {str(e)}"

        return CheckResult(
            status=CheckStatus(status),
            message=message,
            details=results,
            recommendations=self._get_linux_quarantine_recommendations(results)
        )

    def _check_clamav_quarantine(self) -> Dict[str, Any]:
        """Check ClamAV quarantine configuration."""
        quarantine_info = {
            'clamav_installed': False,
            'quarantine_configured': False,
            'quarantine_directory': None,
            'config_files_checked': []
        }

        try:
            # Check if ClamAV is installed
            result = subprocess.run(
                ["which", "clamscan"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode != 0:
                return quarantine_info

            quarantine_info['clamav_installed'] = True

            # Check ClamAV configuration files for quarantine settings
            config_files = [
                '/etc/clamav/clamd.conf',
                '/usr/local/etc/clamd.conf',
                '/opt/clamav/etc/clamd.conf'
            ]

            for config_file in config_files:
                if os.path.exists(config_file):
                    quarantine_info['config_files_checked'].append(config_file)

                    try:
                        with open(config_file, 'r') as f:
                            config_content = f.read()

                        # Look for quarantine-related settings
                        if 'Quarantine' in config_content or 'quarantine' in config_content:
                            quarantine_info['quarantine_configured'] = True

                            # Extract quarantine directory if specified
                            quarantine_match = re.search(r'(?:Quarantine|quarantine)\s+(.+)', config_content)
                            if quarantine_match:
                                quarantine_info['quarantine_directory'] = quarantine_match.group(1).strip()

                    except Exception as e:
                        logger.debug(f"Error reading config file {config_file}: {e}")

            # Check default quarantine directory
            default_quarantine_dirs = [
                '/var/lib/clamav/quarantine',
                '/tmp/clamav-quarantine',
                '/opt/clamav/quarantine'
            ]

            for qdir in default_quarantine_dirs:
                if os.path.exists(qdir):
                    quarantine_info['quarantine_directory'] = qdir
                    quarantine_info['quarantine_configured'] = True
                    break

        except Exception as e:
            logger.error(f"Error checking ClamAV quarantine: {str(e)}")
            quarantine_info['error'] = str(e)

        return quarantine_info

    def _check_other_linux_av_quarantine(self) -> List[Dict[str, Any]]:
        """Check other Linux antivirus quarantine configurations."""
        other_av = []

        # Common Linux AV solutions and their quarantine configurations
        av_configs = {
            'Sophos': {
                'config_paths': ['/opt/sophos-av/etc/savd.conf', '/etc/sophos/savd.conf'],
                'quarantine_dirs': ['/opt/sophos-av/tmp', '/var/sophos-av/quarantine']
            },
            'ESET': {
                'config_paths': ['/etc/opt/eset/esets/esets.conf'],
                'quarantine_dirs': ['/var/opt/eset/esets/cache/quarantine']
            },
            'Bitdefender': {
                'config_paths': ['/opt/BitDefender-scanner/etc/bdscan.conf'],
                'quarantine_dirs': ['/opt/BitDefender-scanner/var/quarantine']
            }
        }

        for av_name, av_config in av_configs.items():
            av_info = {
                'name': av_name,
                'installed': False,
                'quarantine_configured': False,
                'quarantine_directory': None,
                'config_found': False
            }

            # Check configuration files
            for config_path in av_config['config_paths']:
                if os.path.exists(config_path):
                    av_info['installed'] = True
                    av_info['config_found'] = True

                    try:
                        with open(config_path, 'r') as f:
                            config_content = f.read()

                        # Look for quarantine settings
                        if any(keyword in config_content.lower() for keyword in ['quarantine', 'isolate', 'contain']):
                            av_info['quarantine_configured'] = True

                    except Exception as e:
                        logger.debug(f"Error reading {av_name} config: {e}")
                    break

            # Check quarantine directories
            for qdir in av_config['quarantine_dirs']:
                if os.path.exists(qdir):
                    av_info['quarantine_directory'] = qdir
                    av_info['quarantine_configured'] = True
                    break

            if av_info['installed'] or av_info['quarantine_configured']:
                other_av.append(av_info)

        return other_av

    def _check_linux_quarantine_directories(self) -> List[Dict[str, Any]]:
        """Check Linux quarantine directories."""
        quarantine_dirs = []

        # Common quarantine directory locations
        common_quarantine_paths = [
            '/var/quarantine',
            '/tmp/quarantine',
            '/var/lib/quarantine',
            '/opt/quarantine',
            '/home/quarantine'
        ]

        for qdir in common_quarantine_paths:
            if os.path.exists(qdir):
                dir_info = {
                    'path': qdir,
                    'accessible': True,
                    'file_count': 0,
                    'total_size_mb': 0
                }

                try:
                    # Get directory statistics
                    total_size = 0
                    file_count = 0

                    for root, dirs, files in os.walk(qdir):
                        for file in files:
                            file_path = os.path.join(root, file)
                            try:
                                total_size += os.path.getsize(file_path)
                                file_count += 1
                            except (OSError, IOError):
                                continue

                    dir_info['file_count'] = file_count
                    dir_info['total_size_mb'] = round(total_size / (1024 * 1024), 2)
                    dir_info['has_items'] = file_count > 0

                except Exception as e:
                    logger.debug(f"Error analyzing quarantine directory {qdir}: {e}")
                    dir_info['error'] = str(e)

                quarantine_dirs.append(dir_info)

        return quarantine_dirs

    def _check_macos_quarantine(self) -> CheckResult:
        """Check macOS quarantine configuration."""
        results = {
            'system_quarantine': {},
            'xprotect_quarantine': {},
            'third_party_quarantine': [],
            'quarantine_attributes': {}
        }

        try:
            # Check system quarantine (Gatekeeper)
            system_quarantine = self._check_macos_system_quarantine()
            results['system_quarantine'] = system_quarantine

            # Check XProtect quarantine
            xprotect_quarantine = self._check_macos_xprotect_quarantine()
            results['xprotect_quarantine'] = xprotect_quarantine

            # Check third-party quarantine
            third_party_quarantine = self._check_macos_third_party_quarantine()
            results['third_party_quarantine'] = third_party_quarantine

            # Check quarantine extended attributes
            quarantine_attrs = self._check_macos_quarantine_attributes()
            results['quarantine_attributes'] = quarantine_attrs

            # Determine overall status
            status, message = self._assess_macos_quarantine_status(results)

        except Exception as e:
            logger.error(f"Error checking macOS quarantine: {str(e)}")
            status = "error"
            message = f"Error checking macOS quarantine: {str(e)}"

        return CheckResult(
            status=CheckStatus(status),
            message=message,
            details=results,
            recommendations=self._get_macos_quarantine_recommendations(results)
        )

    def _check_macos_system_quarantine(self) -> Dict[str, Any]:
        """Check macOS system quarantine (Gatekeeper)."""
        try:
            # Check Gatekeeper status
            result = subprocess.run(
                ["spctl", "--status"],
                capture_output=True,
                text=True,
                timeout=10
            )

            quarantine_info = {
                'gatekeeper_enabled': False,
                'system_quarantine_active': False
            }

            if result.returncode == 0:
                quarantine_info['gatekeeper_enabled'] = "assessments enabled" in result.stdout
                quarantine_info['system_quarantine_active'] = quarantine_info['gatekeeper_enabled']

            # Check quarantine database
            quarantine_db_path = os.path.expanduser("~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2")

            if os.path.exists(quarantine_db_path):
                quarantine_info['quarantine_database_exists'] = True

                try:
                    db_size = os.path.getsize(quarantine_db_path)
                    quarantine_info['quarantine_database_size_kb'] = round(db_size / 1024, 2)
                    quarantine_info['quarantine_database_active'] = db_size > 1024  # > 1KB indicates activity
                except Exception as e:
                    logger.debug(f"Error checking quarantine database: {e}")

            return quarantine_info

        except Exception as e:
            logger.error(f"Error checking macOS system quarantine: {str(e)}")
            return {'error': str(e)}

    def _check_macos_xprotect_quarantine(self) -> Dict[str, Any]:
        """Check XProtect quarantine functionality."""
        xprotect_info = {
            'xprotect_active': False,
            'quarantine_functionality': False
        }

        try:
            # Check if XProtect service is running
            result = subprocess.run(
                ["ps", "aux"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                if 'XProtect' in result.stdout:
                    xprotect_info['xprotect_active'] = True
                    xprotect_info['quarantine_functionality'] = True

            # Check XProtect configuration directory
            xprotect_config_dir = "/System/Library/CoreServices/XProtect.bundle"
            if os.path.exists(xprotect_config_dir):
                xprotect_info['xprotect_bundle_exists'] = True

        except Exception as e:
            logger.error(f"Error checking XProtect quarantine: {str(e)}")
            xprotect_info['error'] = str(e)

        return xprotect_info

    def _check_macos_third_party_quarantine(self) -> List[Dict[str, Any]]:
        """Check third-party antivirus quarantine on macOS."""
        third_party_quarantine = []

        # Common macOS antivirus and their quarantine locations
        av_quarantine_configs = {
            'Norton Security': {
                'app_path': '/Applications/Norton Security.app',
                'quarantine_paths': [
                    '~/Library/Application Support/Norton/Quarantine',
                    '/Library/Application Support/Norton/Quarantine'
                ]
            },
            'Bitdefender Antivirus': {
                'app_path': '/Applications/Bitdefender Antivirus for Mac.app',
                'quarantine_paths': [
                    '~/Library/Application Support/Bitdefender/Quarantine',
                    '/Library/Application Support/Bitdefender/Quarantine'
                ]
            },
            'Kaspersky Internet Security': {
                'app_path': '/Applications/Kaspersky Internet Security for Mac.app',
                'quarantine_paths': [
                    '~/Library/Application Support/Kaspersky Lab/Quarantine'
                ]
            },
            'Sophos Home': {
                'app_path': '/Applications/Sophos Home.app',
                'quarantine_paths': [
                    '/Library/Application Support/Sophos/Quarantine'
                ]
            }
        }

        for av_name, av_config in av_quarantine_configs.items():
            if os.path.exists(av_config['app_path']):
                av_info = {
                    'name': av_name,
                    'installed': True,
                    'quarantine_configured': False,
                    'quarantine_directory': None,
                    'quarantine_items_count': 0
                }

                # Check quarantine directories
                for qpath in av_config['quarantine_paths']:
                    expanded_path = os.path.expanduser(qpath)
                    if os.path.exists(expanded_path):
                        av_info['quarantine_configured'] = True
                        av_info['quarantine_directory'] = expanded_path

                        try:
                            # Count items in quarantine
                            item_count = len([f for f in os.listdir(expanded_path)
                                            if os.path.isfile(os.path.join(expanded_path, f))])
                            av_info['quarantine_items_count'] = item_count
                        except Exception as e:
                            logger.debug(f"Error counting quarantine items for {av_name}: {e}")
                        break

                third_party_quarantine.append(av_info)

        return third_party_quarantine

    def _check_macos_quarantine_attributes(self) -> Dict[str, Any]:
        """Check macOS quarantine extended attributes."""
        attrs_info = {
            'quarantine_attributes_supported': False,
            'sample_files_checked': [],
            'quarantined_files_found': 0
        }

        try:
            # Check common download directories for quarantine attributes
            download_dirs = [
                os.path.expanduser("~/Downloads"),
                os.path.expanduser("~/Desktop"),
                "/tmp"
            ]

            total_quarantined = 0

            for download_dir in download_dirs:
                if os.path.exists(download_dir):
                    try:
                        # Check a few files for quarantine attributes
                        files = [f for f in os.listdir(download_dir)
                                if os.path.isfile(os.path.join(download_dir, f))][:5]  # Sample 5 files

                        for filename in files:
                            filepath = os.path.join(download_dir, filename)

                            # Check for quarantine extended attribute
                            result = subprocess.run(
                                ["xattr", "-l", filepath],
                                capture_output=True,
                                text=True,
                                timeout=5
                            )

                            if result.returncode == 0:
                                if "com.apple.quarantine" in result.stdout:
                                    total_quarantined += 1
                                    attrs_info['quarantine_attributes_supported'] = True

                                attrs_info['sample_files_checked'].append({
                                    'file': filename,
                                    'quarantined': "com.apple.quarantine" in result.stdout
                                })

                    except Exception as e:
                        logger.debug(f"Error checking quarantine attributes in {download_dir}: {e}")

            attrs_info['quarantined_files_found'] = total_quarantined

        except Exception as e:
            logger.error(f"Error checking quarantine attributes: {str(e)}")
            attrs_info['error'] = str(e)

        return attrs_info

    def _assess_windows_quarantine_status(self, results: Dict[str, Any]) -> Tuple[str, str]:
        """Assess Windows quarantine status."""
        issues = []

        defender_quarantine = results.get('defender_quarantine', {})
        if 'error' not in defender_quarantine:
            if not defender_quarantine.get('quarantine_configured'):
                issues.append("Windows Defender quarantine not configured")
            elif not defender_quarantine.get('reasonable_purge_delay'):
                issues.append("Windows Defender quarantine purge delay not optimal")

        if not defender_quarantine.get('quarantine_folder_accessible'):
            issues.append("Quarantine folder not accessible")

        third_party = results.get('third_party_quarantine', [])
        if not third_party and 'error' in defender_quarantine:
            issues.append("No quarantine system detected")

        if not issues:
            return 'pass', 'Quarantine is properly configured'
        elif len(issues) == 1 and 'not optimal' in issues[0]:
            return 'warning', issues[0]
        else:
            return 'fail', f"Found {len(issues)} quarantine configuration issues"

    def _assess_linux_quarantine_status(self, results: Dict[str, Any]) -> Tuple[str, str]:
        """Assess Linux quarantine status."""
        issues = []

        clamav_quarantine = results.get('clamav_quarantine', {})
        other_av = results.get('other_av_quarantine', [])

        if clamav_quarantine.get('clamav_installed'):
            if not clamav_quarantine.get('quarantine_configured'):
                issues.append("ClamAV quarantine not configured")
        elif not other_av:
            issues.append("No antivirus quarantine system detected")

        # Check if any quarantine is configured
        has_quarantine = (clamav_quarantine.get('quarantine_configured') or
                         any(av.get('quarantine_configured') for av in other_av))

        if not has_quarantine:
            issues.append("No quarantine functionality configured")

        if not issues:
            return 'pass', 'Quarantine functionality is configured'
        else:
            return 'warning', f"Quarantine configuration needs attention: {', '.join(issues)}"

    def _assess_macos_quarantine_status(self, results: Dict[str, Any]) -> Tuple[str, str]:
        """Assess macOS quarantine status."""
        issues = []

        system_quarantine = results.get('system_quarantine', {})
        if not system_quarantine.get('gatekeeper_enabled'):
            issues.append("Gatekeeper (system quarantine) is disabled")

        xprotect_quarantine = results.get('xprotect_quarantine', {})
        if not xprotect_quarantine.get('xprotect_active'):
            issues.append("XProtect quarantine functionality may not be active")

        quarantine_attrs = results.get('quarantine_attributes', {})
        if not quarantine_attrs.get('quarantine_attributes_supported'):
            issues.append("Quarantine extended attributes not detected")

        if not issues:
            return 'pass', 'macOS quarantine systems are functioning'
        elif len(issues) == 1 and 'may not be active' in issues[0]:
            return 'warning', issues[0]
        else:
            return 'fail', f"Found {len(issues)} quarantine system issues"

    def _get_windows_quarantine_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """Generate Windows quarantine recommendations."""
        recommendations = []

        defender_quarantine = results.get('defender_quarantine', {})
        if 'error' not in defender_quarantine:
            if not defender_quarantine.get('quarantine_configured'):
                recommendations.append("Configure Windows Defender quarantine settings")

            if not defender_quarantine.get('reasonable_purge_delay'):
                recommendations.append("Set quarantine purge delay to 7-90 days for optimal security")

        if not defender_quarantine.get('quarantine_folder_accessible'):
            recommendations.append("Ensure quarantine folder is accessible and properly configured")

        third_party = results.get('third_party_quarantine', [])
        for av in third_party:
            if not av.get('quarantine_configured'):
                recommendations.append(f"Configure quarantine settings for {av['antivirus']}")

        if not recommendations:
            recommendations.append("Quarantine configuration appears optimal")

        return recommendations

    def _get_linux_quarantine_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """Generate Linux quarantine recommendations."""
        recommendations = []

        clamav_quarantine = results.get('clamav_quarantine', {})
        if clamav_quarantine.get('clamav_installed') and not clamav_quarantine.get('quarantine_configured'):
            recommendations.append("Configure ClamAV to quarantine detected threats instead of deleting them")
            recommendations.append("Set up a dedicated quarantine directory: --quarantine-dir=/var/lib/clamav/quarantine")

        other_av = results.get('other_av_quarantine', [])
        for av in other_av:
            if av.get('installed') and not av.get('quarantine_configured'):
                recommendations.append(f"Configure quarantine settings for {av['name']}")

        quarantine_dirs = results.get('quarantine_directories', [])
        if not quarantine_dirs:
            recommendations.append("Create a dedicated quarantine directory with appropriate permissions")

        if not recommendations:
            recommendations.append("Consider implementing quarantine functionality to isolate threats safely")

        return recommendations

    def _get_macos_quarantine_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """Generate macOS quarantine recommendations."""
        recommendations = []

        system_quarantine = results.get('system_quarantine', {})
        if not system_quarantine.get('gatekeeper_enabled'):
            recommendations.append("Enable Gatekeeper in System Preferences > Security & Privacy")

        xprotect_quarantine = results.get('xprotect_quarantine', {})
        if not xprotect_quarantine.get('xprotect_active'):
            recommendations.append("Ensure XProtect is active and up to date")

        quarantine_attrs = results.get('quarantine_attributes', {})
        if not quarantine_attrs.get('quarantine_attributes_supported'):
            recommendations.append("Verify that downloaded files are properly quarantined with extended attributes")

        third_party = results.get('third_party_quarantine', [])
        for av in third_party:
            if av.get('installed') and not av.get('quarantine_configured'):
                recommendations.append(f"Configure quarantine settings for {av['name']}")

        if not recommendations:
            recommendations.append("macOS quarantine systems appear to be functioning properly")

        return recommendations

    def _create_error_result(self, error_message: str) -> CheckResult:
        """Create an error result."""
        return CheckResult(
            status=CheckStatus.ERROR,
            message=error_message,
            details={"error": error_message}
        )