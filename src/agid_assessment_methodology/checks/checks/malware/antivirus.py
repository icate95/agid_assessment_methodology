"""
Antivirus protection check.

This module implements checks to verify if antivirus software is active and properly configured
on both Windows and Linux systems.
"""

import logging
import subprocess
import json
import platform
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta

from ..base import BaseCheck, CheckResult

logger = logging.getLogger(__name__)


class AntivirusCheck(BaseCheck):
    """Check for active antivirus protection."""

    def __init__(self):
        super().__init__()
        self.id = "antivirus"
        self.name = "Antivirus Protection"
        self.description = "Verify that antivirus software is installed, active, and properly configured"
        self.category = "malware"
        self.severity = "high"
        self.supported_os = ["windows", "linux", "macos"]

    def execute(self, context: Dict[str, Any]) -> CheckResult:
        """
        Execute the antivirus check.

        Args:
            context: Execution context containing OS info and other details

        Returns:
            CheckResult with the antivirus status
        """
        try:
            os_type = context.get('os_type', platform.system().lower())

            if os_type == 'windows':
                return self._check_windows_antivirus()
            elif os_type == 'linux':
                return self._check_linux_antivirus()
            elif os_type == 'darwin':  # macOS
                return self._check_macos_antivirus()
            else:
                return self._create_error_result(f"Unsupported OS: {os_type}")

        except Exception as e:
            logger.error(f"Error in antivirus check: {str(e)}")
            return self._create_error_result(str(e))

    def _check_windows_antivirus(self) -> CheckResult:
        """Check antivirus status on Windows systems."""
        results = {
            'defender_status': None,
            'third_party_av': [],
            'real_time_protection': False,
            'scan_engine_version': None,
            'last_scan_time': None
        }

        # Check Windows Defender status
        defender_info = self._check_windows_defender()
        results.update(defender_info)

        # Check for third-party antivirus
        third_party = self._check_third_party_windows_av()
        results['third_party_av'] = third_party

        # Determine overall status
        has_active_av = (
                results['defender_status'] == 'enabled' or
                any(av.get('status') == 'active' for av in third_party)
        )

        if has_active_av and results['real_time_protection']:
            status = "pass"
            message = "Antivirus protection is active"
        elif has_active_av:
            status = "warning"
            message = "Antivirus is installed but real-time protection may be disabled"
        else:
            status = "fail"
            message = "No active antivirus protection detected"

        return CheckResult(
            check_id=self.id,
            name=self.name,
            status=status,
            severity=self.severity,
            message=message,
            details=results,
            recommendations=self._get_windows_recommendations(results)
        )

    def _check_windows_defender(self) -> Dict[str, Any]:
        """Check Windows Defender status using PowerShell."""
        try:
            # PowerShell command to check Windows Defender status
            ps_command = """
            Get-MpComputerStatus | Select-Object -Property 
                AntivirusEnabled,
                AntiSpywareEnabled,
                RealTimeProtectionEnabled,
                OnAccessProtectionEnabled,
                IoavProtectionEnabled,
                BehaviorMonitorEnabled,
                AntivirusSignatureLastUpdated,
                EngineVersion
            | ConvertTo-Json
            """

            result = subprocess.run(
                ["powershell", "-Command", ps_command],
                capture_output=True,
                text=True,
                timeout=30
            )

            if result.returncode == 0:
                defender_status = json.loads(result.stdout)

                return {
                    'defender_status': 'enabled' if defender_status.get('AntivirusEnabled') else 'disabled',
                    'real_time_protection': defender_status.get('RealTimeProtectionEnabled', False),
                    'behavior_monitoring': defender_status.get('BehaviorMonitorEnabled', False),
                    'scan_engine_version': defender_status.get('EngineVersion'),
                    'last_signature_update': defender_status.get('AntivirusSignatureLastUpdated')
                }
            else:
                logger.warning(f"Failed to get Windows Defender status: {result.stderr}")
                return {'defender_status': 'unknown'}

        except subprocess.TimeoutExpired:
            logger.error("Timeout while checking Windows Defender status")
            return {'defender_status': 'timeout'}
        except Exception as e:
            logger.error(f"Error checking Windows Defender: {str(e)}")
            return {'defender_status': 'error'}

    def _check_third_party_windows_av(self) -> List[Dict[str, Any]]:
        """Check for third-party antivirus software on Windows."""
        third_party_av = []

        try:
            # Check WMI for AntiVirusProduct
            wmi_command = """
            Get-WmiObject -Namespace "root\\SecurityCenter2" -Class AntiVirusProduct |
            Select-Object displayName, productState, pathToSignedProductExe |
            ConvertTo-Json
            """

            result = subprocess.run(
                ["powershell", "-Command", wmi_command],
                capture_output=True,
                text=True,
                timeout=30
            )

            if result.returncode == 0 and result.stdout.strip():
                av_products = json.loads(result.stdout)

                # Handle single product vs array of products
                if isinstance(av_products, dict):
                    av_products = [av_products]

                for product in av_products:
                    # Decode product state (this is a bit field)
                    product_state = product.get('productState', 0)
                    if isinstance(product_state, str):
                        product_state = int(product_state, 16) if product_state.startswith('0x') else int(product_state)

                    # Bit interpretation for productState
                    enabled = bool(product_state & 0x1000)
                    updated = bool(product_state & 0x10)

                    third_party_av.append({
                        'name': product.get('displayName', 'Unknown'),
                        'status': 'active' if enabled else 'inactive',
                        'updated': updated,
                        'path': product.get('pathToSignedProductExe', '')
                    })

        except Exception as e:
            logger.error(f"Error checking third-party antivirus: {str(e)}")

        return third_party_av

    def _check_linux_antivirus(self) -> CheckResult:
        """Check antivirus status on Linux systems."""
        results = {
            'clamav_installed': False,
            'clamav_running': False,
            'daemon_status': None,
            'database_version': None,
            'last_update': None,
            'other_av': []
        }

        # Check ClamAV
        clamav_info = self._check_clamav()
        results.update(clamav_info)

        # Check for other Linux antivirus solutions
        other_av = self._check_other_linux_av()
        results['other_av'] = other_av

        # Determine overall status
        has_antivirus = (
                results['clamav_running'] or
                any(av.get('status') == 'running' for av in other_av)
        )

        if has_antivirus:
            status = "pass"
            message = "Antivirus protection is active"
        elif results['clamav_installed'] or other_av:
            status = "warning"
            message = "Antivirus is installed but not actively running"
        else:
            status = "fail"
            message = "No antivirus protection detected"

        return CheckResult(
            check_id=self.id,
            name=self.name,
            status=status,
            severity=self.severity,
            message=message,
            details=results,
            recommendations=self._get_linux_recommendations(results)
        )

    def _check_clamav(self) -> Dict[str, Any]:
        """Check ClamAV installation and status."""
        clamav_info = {
            'clamav_installed': False,
            'clamav_running': False,
            'daemon_status': None,
            'database_version': None
        }

        try:
            # Check if ClamAV is installed
            result = subprocess.run(
                ["which", "clamscan"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                clamav_info['clamav_installed'] = True

                # Check ClamAV daemon status
                daemon_status = self._check_clamd_status()
                clamav_info.update(daemon_status)

                # Get database version
                db_version = self._get_clamav_db_version()
                clamav_info['database_version'] = db_version

        except Exception as e:
            logger.error(f"Error checking ClamAV: {str(e)}")

        return clamav_info

    def _check_clamd_status(self) -> Dict[str, Any]:
        """Check ClamAV daemon status."""
        try:
            # Try systemctl first
            result = subprocess.run(
                ["systemctl", "is-active", "clamav-daemon"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                return {
                    'clamav_running': True,
                    'daemon_status': 'active'
                }

            # If systemctl fails, try service command
            result = subprocess.run(
                ["service", "clamav-daemon", "status"],
                capture_output=True,
                text=True,
                timeout=10
            )

            return {
                'clamav_running': result.returncode == 0,
                'daemon_status': 'active' if result.returncode == 0 else 'inactive'
            }

        except Exception as e:
            logger.error(f"Error checking ClamAV daemon: {str(e)}")
            return {
                'clamav_running': False,
                'daemon_status': 'unknown'
            }

    def _get_clamav_db_version(self) -> Optional[str]:
        """Get ClamAV database version."""
        try:
            result = subprocess.run(
                ["sigtool", "--info"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                # Parse output for version information
                for line in result.stdout.split('\n'):
                    if 'ClamAV version' in line:
                        return line.split(':')[1].strip()

        except Exception as e:
            logger.error(f"Error getting ClamAV DB version: {str(e)}")

        return None

    def _check_other_linux_av(self) -> List[Dict[str, Any]]:
        """Check for other antivirus solutions on Linux."""
        other_av = []

        # Common Linux antivirus solutions to check
        av_solutions = {
            'sophos': ['systemctl is-active sophos-sav'],
            'eset': ['systemctl is-active esets'],
            'bitdefender': ['systemctl is-active bd-protection'],
            'kaspersky': ['systemctl is-active kesl']
        }

        for av_name, commands in av_solutions.items():
            try:
                for cmd in commands:
                    result = subprocess.run(
                        cmd.split(),
                        capture_output=True,
                        text=True,
                        timeout=10
                    )

                    if result.returncode == 0:
                        other_av.append({
                            'name': av_name.capitalize(),
                            'status': 'running',
                            'check_method': cmd
                        })
                        break
                else:
                    # Check if installed but not running
                    install_check_result = subprocess.run(
                        ["which", av_name],
                        capture_output=True,
                        text=True,
                        timeout=5
                    )

                    if install_check_result.returncode == 0:
                        other_av.append({
                            'name': av_name.capitalize(),
                            'status': 'installed_not_running',
                            'path': install_check_result.stdout.strip()
                        })

            except Exception as e:
                logger.debug(f"Error checking {av_name}: {str(e)}")

        return other_av

    def _check_macos_antivirus(self) -> CheckResult:
        """Check antivirus status on macOS systems."""
        results = {
            'xprotect_enabled': False,
            'gatekeeper_enabled': False,
            'third_party_av': [],
            'system_integrity_protection': False
        }

        # Check XProtect (built-in macOS malware protection)
        xprotect_status = self._check_xprotect()
        results.update(xprotect_status)

        # Check Gatekeeper
        gatekeeper_status = self._check_gatekeeper()
        results.update(gatekeeper_status)

        # Check SIP (System Integrity Protection)
        sip_status = self._check_sip()
        results.update(sip_status)

        # Check for third-party antivirus
        third_party = self._check_third_party_macos_av()
        results['third_party_av'] = third_party

        # Determine overall status
        has_protection = (
                results['xprotect_enabled'] or
                results['gatekeeper_enabled'] or
                any(av.get('status') == 'active' for av in third_party)
        )

        if has_protection:
            status = "pass"
            message = "System protection is active"
        else:
            status = "fail"
            message = "No antivirus or system protection detected"

        return CheckResult(
            check_id=self.id,
            name=self.name,
            status=status,
            severity=self.severity,
            message=message,
            details=results,
            recommendations=self._get_macos_recommendations(results)
        )

    def _check_xprotect(self) -> Dict[str, Any]:
        """Check XProtect status on macOS."""
        try:
            # Check if XProtect is running
            result = subprocess.run(
                ["ps", "aux"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                xprotect_running = 'XProtect' in result.stdout
                return {'xprotect_enabled': xprotect_running}

        except Exception as e:
            logger.error(f"Error checking XProtect: {str(e)}")

        return {'xprotect_enabled': False}

    def _check_gatekeeper(self) -> Dict[str, Any]:
        """Check Gatekeeper status on macOS."""
        try:
            result = subprocess.run(
                ["spctl", "--status"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                # Gatekeeper is enabled if spctl returns "assessments enabled"
                gatekeeper_enabled = "assessments enabled" in result.stdout
                return {'gatekeeper_enabled': gatekeeper_enabled}

        except Exception as e:
            logger.error(f"Error checking Gatekeeper: {str(e)}")

        return {'gatekeeper_enabled': False}

    def _check_sip(self) -> Dict[str, Any]:
        """Check System Integrity Protection status on macOS."""
        try:
            result = subprocess.run(
                ["csrutil", "status"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                sip_enabled = "enabled" in result.stdout.lower()
                return {'system_integrity_protection': sip_enabled}

        except Exception as e:
            logger.error(f"Error checking SIP: {str(e)}")

        return {'system_integrity_protection': False}

    def _check_third_party_macos_av(self) -> List[Dict[str, Any]]:
        """Check for third-party antivirus on macOS."""
        third_party_av = []

        # Common macOS antivirus applications
        av_apps = [
            'Norton Security',
            'Bitdefender Antivirus',
            'Kaspersky Internet Security',
            'Sophos Home',
            'Avast Security',
            'AVG AntiVirus',
            'Malwarebytes'
        ]

        try:
            # Check Applications folder
            result = subprocess.run(
                ["ls", "/Applications"],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                apps_list = result.stdout

                for av_app in av_apps:
                    if av_app in apps_list:
                        # Check if the app has running processes
                        proc_check = subprocess.run(
                            ["pgrep", "-f", av_app],
                            capture_output=True,
                            text=True,
                            timeout=5
                        )

                        status = 'active' if proc_check.returncode == 0 else 'installed'

                        third_party_av.append({
                            'name': av_app,
                            'status': status,
                            'location': f"/Applications/{av_app}.app"
                        })

        except Exception as e:
            logger.error(f"Error checking third-party AV on macOS: {str(e)}")

        return third_party_av

    def _get_windows_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """Get recommendations for Windows antivirus configuration."""
        recommendations = []

        if results.get('defender_status') == 'disabled' and not results.get('third_party_av'):
            recommendations.append("Install and enable Windows Defender or a third-party antivirus solution")

        if not results.get('real_time_protection'):
            recommendations.append("Enable real-time protection for continuous malware monitoring")

        if results.get('defender_status') == 'enabled':
            last_update = results.get('last_signature_update')
            if last_update:
                try:
                    update_date = datetime.fromisoformat(last_update.replace('Z', '+00:00'))
                    if datetime.now() - update_date > timedelta(days=7):
                        recommendations.append("Update antivirus signatures - they appear to be outdated")
                except Exception:
                    pass

        if not recommendations:
            recommendations.append("Antivirus configuration appears optimal")

        return recommendations

    def _get_linux_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """Get recommendations for Linux antivirus configuration."""
        recommendations = []

        if not results.get('clamav_installed') and not results.get('other_av'):
            recommendations.append("Consider installing ClamAV or another antivirus solution")

        if results.get('clamav_installed') and not results.get('clamav_running'):
            recommendations.append("Start and enable the ClamAV daemon for real-time protection")
            recommendations.append("Configure automatic database updates for ClamAV")

        if results.get('clamav_running'):
            recommendations.append("Schedule regular full system scans")
            recommendations.append("Ensure ClamAV database is updated regularly")

        if not recommendations:
            recommendations.append("Consider implementing additional security measures like file integrity monitoring")

        return recommendations

    def _get_macos_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """Get recommendations for macOS antivirus/protection configuration."""
        recommendations = []

        if not results.get('xprotect_enabled'):
            recommendations.append("Ensure XProtect is enabled for basic malware protection")

        if not results.get('gatekeeper_enabled'):
            recommendations.append("Enable Gatekeeper to prevent execution of unverified applications")

        if not results.get('system_integrity_protection'):
            recommendations.append("Enable System Integrity Protection (SIP) for enhanced security")

        if not results.get('third_party_av') and results.get('xprotect_enabled'):
            recommendations.append("Consider installing additional third-party antivirus for enhanced protection")

        if not recommendations:
            recommendations.append("macOS protection configuration appears adequate")

        return recommendations